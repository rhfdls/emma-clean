// <auto-generated />
using System;
using System.Collections.Generic;
using Emma.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Emma.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250605164758_AddResourceAssignmentSystem")]
    partial class AddResourceAssignmentSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Emma.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Emma.Data.Models.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FubApiKey")
                        .HasColumnType("text");

                    b.Property<int?>("FubUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Emma.Data.Models.AgentAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmmaAnalysisId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmmaAnalysisId");

                    b.ToTable("AgentAssignments");

                    b.HasAnnotation("Relational:JsonPropertyName", "agent_assignments");
                });

            modelBuilder.Entity("Emma.Data.Models.AgentPhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("AgentPhoneNumbers");
                });

            modelBuilder.Entity("Emma.Data.Models.AgentSubscriptionAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationSubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("OrganizationSubscriptionId");

                    b.ToTable("AgentSubscriptionAssignment");
                });

            modelBuilder.Entity("Emma.Data.Models.CallMetadata", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DirectionBasedOnAgent")
                        .HasColumnType("integer");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.ToTable("CallMetadata");
                });

            modelBuilder.Entity("Emma.Data.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, string>>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeadSource")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Emma.Data.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("ExternalIds")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("Emma.Data.Models.ConversationSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid");

                    b.Property<double?>("QualityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("SummaryText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId")
                        .IsUnique();

                    b.HasIndex("InteractionId");

                    b.HasIndex("QualityScore");

                    b.ToTable("ConversationSummaries");
                });

            modelBuilder.Entity("Emma.Data.Models.DeviceToken", b =>
                {
                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgentId", "DeviceId");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("Emma.Data.Models.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddress");
                });

            modelBuilder.Entity("Emma.Data.Models.EmmaAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("ComplianceFlags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "compliance_flags");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FollowupGuidance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "followup_guidance");

                    b.Property<string>("LeadStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "lead_status");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecommendedStrategy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "recommended_strategy");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("EmmaAnalyses");
                });

            modelBuilder.Entity("Emma.Data.Models.EmmaTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmmaAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmmaAnalysisId");

                    b.ToTable("EmmaTask");

                    b.HasAnnotation("Relational:JsonPropertyName", "tasks_list");
                });

            modelBuilder.Entity("Emma.Data.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("Emma.Data.Models.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, string>>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("ExternalIds")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("Emma.Data.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("AiResponse")
                        .HasColumnType("text");

                    b.Property<string>("BlobStorageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("InteractionId");

                    b.HasIndex("OccurredAt", "Type")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Emma.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FubApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FubId")
                        .HasColumnType("integer");

                    b.Property<string>("FubSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FubSystemKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerAgentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FubApiKey")
                        .IsUnique();

                    b.HasIndex("FubSystem")
                        .IsUnique();

                    b.HasIndex("FubSystemKey")
                        .IsUnique();

                    b.HasIndex("OwnerAgentId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Emma.Data.Models.OrganizationSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeatsLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("OrganizationSubscription");
                });

            modelBuilder.Entity("Emma.Data.Models.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Emma.Data.Models.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("Emma.Data.Models.RelatedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InteractionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("InteractionId");

                    b.ToTable("RelatedEntity");
                });

            modelBuilder.Entity("Emma.Data.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByAgentId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<List<string>>("ServiceAreas")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Specialties")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedByAgentId");

                    b.HasIndex("CategoryId", "IsPreferred", "Rating");

                    b.HasIndex("OrganizationId", "Name", "CategoryId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Emma.Data.Models.ResourceAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AssignedByAgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientFeedback")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("ClientRating")
                        .HasColumnType("numeric");

                    b.Property<string>("ClientRequest")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, string>>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("FollowUpAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InteractionId")
                        .HasColumnType("uuid");

                    b.Property<string>("InternalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OutcomeNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WasUsed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByAgentId");

                    b.HasIndex("InteractionId");

                    b.HasIndex("ContactId", "Status");

                    b.HasIndex("OrganizationId", "AssignedAt");

                    b.HasIndex("ResourceId", "Status");

                    b.ToTable("ResourceAssignments");
                });

            modelBuilder.Entity("Emma.Data.Models.ResourceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.ToTable("ResourceCategories");
                });

            modelBuilder.Entity("Emma.Data.Models.ResourceRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlternativeResourceContact")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AlternativeResourceName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientFeedback")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ContactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, string>>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("InteractionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RecommendationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("RecommendationOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecommendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecommendedByAgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SelectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WasContacted")
                        .HasColumnType("boolean");

                    b.Property<bool>("WasSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("WhyAlternativeChosen")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.HasIndex("RecommendedByAgentId");

                    b.HasIndex("ContactId", "RecommendedAt");

                    b.HasIndex("OrganizationId", "RecommendedAt");

                    b.HasIndex("ResourceId", "WasSelected");

                    b.ToTable("ResourceRecommendations");
                });

            modelBuilder.Entity("Emma.Data.Models.Subscription", b =>
                {
                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCallProcessingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeatsLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.HasKey("AgentId");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Emma.Data.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlan");
                });

            modelBuilder.Entity("Emma.Data.Models.SubscriptionPlanFeature", b =>
                {
                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.HasKey("SubscriptionPlanId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SubscriptionPlanFeature");
                });

            modelBuilder.Entity("Emma.Data.Models.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("test_entities");
                });

            modelBuilder.Entity("Emma.Data.Models.Transcription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlobStorageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("Transcriptions");
                });

            modelBuilder.Entity("Emma.Data.Models.Agent", b =>
                {
                    b.HasOne("Emma.Data.Models.Organization", "Organization")
                        .WithMany("Agents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Emma.Data.Models.AgentAssignment", b =>
                {
                    b.HasOne("Emma.Data.Models.EmmaAnalysis", "EmmaAnalysis")
                        .WithMany("AgentAssignments")
                        .HasForeignKey("EmmaAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmmaAnalysis");
                });

            modelBuilder.Entity("Emma.Data.Models.AgentPhoneNumber", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithOne("PhoneNumber")
                        .HasForeignKey("Emma.Data.Models.AgentPhoneNumber", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Data.Models.AgentSubscriptionAssignment", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithMany("SubscriptionAssignments")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.OrganizationSubscription", "OrganizationSubscription")
                        .WithMany("AgentAssignments")
                        .HasForeignKey("OrganizationSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("OrganizationSubscription");
                });

            modelBuilder.Entity("Emma.Data.Models.CallMetadata", b =>
                {
                    b.HasOne("Emma.Data.Models.Message", "Message")
                        .WithOne("CallMetadata")
                        .HasForeignKey("Emma.Data.Models.CallMetadata", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Emma.Data.Models.Contact", b =>
                {
                    b.HasOne("Emma.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Emma.Data.Models.Conversation", b =>
                {
                    b.HasOne("Emma.Data.Models.Organization", null)
                        .WithMany("Conversations")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Emma.Data.Models.ConversationSummary", b =>
                {
                    b.HasOne("Emma.Data.Models.Interaction", "Interaction")
                        .WithMany()
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("Emma.Data.Models.DeviceToken", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Data.Models.EmailAddress", b =>
                {
                    b.HasOne("Emma.Data.Models.Contact", null)
                        .WithMany("Emails")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Emma.Data.Models.EmmaAnalysis", b =>
                {
                    b.HasOne("Emma.Data.Models.Message", "Message")
                        .WithMany("EmmaAnalyses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Emma.Data.Models.EmmaTask", b =>
                {
                    b.HasOne("Emma.Data.Models.EmmaAnalysis", null)
                        .WithMany("TasksList")
                        .HasForeignKey("EmmaAnalysisId");
                });

            modelBuilder.Entity("Emma.Data.Models.Message", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithMany("Messages")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("Emma.Data.Models.Interaction", "Interaction")
                        .WithMany("Messages")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("Emma.Data.Models.Organization", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "OwnerAgent")
                        .WithMany()
                        .HasForeignKey("OwnerAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnerAgent");
                });

            modelBuilder.Entity("Emma.Data.Models.OrganizationSubscription", b =>
                {
                    b.HasOne("Emma.Data.Models.Organization", "Organization")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Emma.Data.Models.PasswordResetToken", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Data.Models.PhoneNumber", b =>
                {
                    b.HasOne("Emma.Data.Models.Contact", null)
                        .WithMany("Phones")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Emma.Data.Models.RelatedEntity", b =>
                {
                    b.HasOne("Emma.Data.Models.Conversation", null)
                        .WithMany("RelatedEntities")
                        .HasForeignKey("ConversationId");

                    b.HasOne("Emma.Data.Models.Interaction", null)
                        .WithMany("RelatedEntities")
                        .HasForeignKey("InteractionId");
                });

            modelBuilder.Entity("Emma.Data.Models.Resource", b =>
                {
                    b.HasOne("Emma.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Emma.Data.Models.ResourceCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Agent", "CreatedByAgent")
                        .WithMany()
                        .HasForeignKey("CreatedByAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agent");

                    b.Navigation("Category");

                    b.Navigation("CreatedByAgent");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Emma.Data.Models.ResourceAssignment", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "AssignedByAgent")
                        .WithMany()
                        .HasForeignKey("AssignedByAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Interaction", "Interaction")
                        .WithMany()
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Emma.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedByAgent");

                    b.Navigation("Contact");

                    b.Navigation("Interaction");

                    b.Navigation("Organization");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Emma.Data.Models.ResourceRecommendation", b =>
                {
                    b.HasOne("Emma.Data.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Interaction", "Interaction")
                        .WithMany()
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Emma.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Agent", "RecommendedByAgent")
                        .WithMany()
                        .HasForeignKey("RecommendedByAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Interaction");

                    b.Navigation("Organization");

                    b.Navigation("RecommendedByAgent");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Emma.Data.Models.Subscription", b =>
                {
                    b.HasOne("Emma.Data.Models.Agent", "Agent")
                        .WithOne("Subscription")
                        .HasForeignKey("Emma.Data.Models.Subscription", "AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.SubscriptionPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agent");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Emma.Data.Models.SubscriptionPlanFeature", b =>
                {
                    b.HasOne("Emma.Data.Models.Feature", "Feature")
                        .WithMany("SubscriptionPlanFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emma.Data.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SubscriptionPlanFeatures")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Emma.Data.Models.Transcription", b =>
                {
                    b.HasOne("Emma.Data.Models.Message", "Message")
                        .WithOne("Transcription")
                        .HasForeignKey("Emma.Data.Models.Transcription", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Emma.Data.Models.Agent", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("PhoneNumber");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionAssignments");
                });

            modelBuilder.Entity("Emma.Data.Models.Contact", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Emma.Data.Models.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("RelatedEntities");
                });

            modelBuilder.Entity("Emma.Data.Models.EmmaAnalysis", b =>
                {
                    b.Navigation("AgentAssignments");

                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Emma.Data.Models.Feature", b =>
                {
                    b.Navigation("SubscriptionPlanFeatures");
                });

            modelBuilder.Entity("Emma.Data.Models.Interaction", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("RelatedEntities");
                });

            modelBuilder.Entity("Emma.Data.Models.Message", b =>
                {
                    b.Navigation("CallMetadata");

                    b.Navigation("EmmaAnalyses");

                    b.Navigation("Transcription");
                });

            modelBuilder.Entity("Emma.Data.Models.Organization", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Conversations");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Emma.Data.Models.OrganizationSubscription", b =>
                {
                    b.Navigation("AgentAssignments");
                });

            modelBuilder.Entity("Emma.Data.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("SubscriptionPlanFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
