using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Emma.Models.Models
{
    /// <summary>
    /// Represents an actionable task or follow-up item, generated by user, agent, or AI, linked to contacts/interactions, NBA, and supporting recurrence/dependencies.
    /// </summary>
    public class TaskItem : BaseEntity
    {
        // Core linkage
        [Required]
        public Guid ContactId { get; set; }
        public virtual Contact? Contact { get; set; }

        public Guid? InteractionId { get; set; }
        public virtual Interaction? Interaction { get; set; }

        // Task details
        [Required]
        [MaxLength(200)]
        public string Title { get; set; } = string.Empty;
        public string? Description { get; set; }

        // Status/Priority as strings for hot-loadable configurability
        [Required]
        [MaxLength(32)]
        public string Status { get; set; } = "pending"; // e.g., pending, inprogress, completed, cancelled
        [Required]
        [MaxLength(32)]
        public string Priority { get; set; } = "normal"; // e.g., low, normal, high, urgent
        // SPRINT2: For EF/DbContext alignment, ensure TaskStatus enum is available via alias if needed
        // using TaskStatus = Emma.Models.Enums.TaskStatus;
        // public TaskStatus? TaskStatus { get; set; }

        // Assignment
        public Guid? AssignedToUserId { get; set; }
        public virtual User? AssignedToUser { get; set; }

        // SPRINT2: For DbContext alignment
        public Guid? AssignedToId { get; set; }
        public virtual User? AssignedTo { get; set; }

        // Timing
        public DateTime? DueDate { get; set; }
        public DateTime? CompletedAt { get; set; }

        // Recurrence
        public string? RecurrenceRule { get; set; } // e.g., iCal RRULE string or custom JSON
        public Guid? ParentTaskId { get; set; } // for dependencies
        public virtual TaskItem? ParentTask { get; set; }
        public virtual ICollection<TaskItem> DependentTasks { get; set; } = new List<TaskItem>();

        // Agentic/AI/NBA integration
        public string? Source { get; set; } // e.g., "user", "AI", "NBA"
        public string? SourceReferenceId { get; set; } // e.g., NBA recommendation id
        public double? ConfidenceScore { get; set; } // for AI/NBA
        public bool RequiresApproval { get; set; }
        public string? ApprovalStatus { get; set; } // pending, approved, rejected

        // Extensible metadata
        [Column(TypeName = "jsonb")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? Metadata { get; set; }        
    }
}    