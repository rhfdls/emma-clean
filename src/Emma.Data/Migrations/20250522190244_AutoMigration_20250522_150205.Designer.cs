// <auto-generated />
using System;
using System.Collections.Generic;
using Emma.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Emma.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250522190244_AutoMigration_20250522_150205")]
    partial class AutoMigration_20250522_150205
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Emma.Models.Models.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FubApiKey")
                        .HasColumnType("text");

                    b.Property<int?>("FubUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Emma.Models.Models.AgentAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmmaAnalysisId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmmaAnalysisId");

                    b.ToTable("AgentAssignments");

                    b.HasAnnotation("Relational:JsonPropertyName", "agent_assignments");
                });

            modelBuilder.Entity("Emma.Models.Models.AgentPhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("AgentPhoneNumbers");
                });

            modelBuilder.Entity("Emma.Models.Models.CallMetadata", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DirectionBasedOnAgent")
                        .HasColumnType("integer");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.ToTable("CallMetadata");
                });

            modelBuilder.Entity("Emma.Models.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Emma.Models.Models.ConversationSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<double?>("QualityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("SummaryText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId")
                        .IsUnique();

                    b.HasIndex("QualityScore");

                    b.ToTable("ConversationSummaries");
                });

            modelBuilder.Entity("Emma.Models.Models.DeviceToken", b =>
                {
                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgentId", "DeviceId");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("Emma.Models.Models.EmmaAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("ComplianceFlags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "compliance_flags");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FollowupGuidance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "followup_guidance");

                    b.Property<string>("LeadStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "lead_status");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecommendedStrategy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "recommended_strategy");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("EmmaAnalyses");
                });

            modelBuilder.Entity("Emma.Models.Models.EmmaTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmmaAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmmaAnalysisId");

                    b.ToTable("EmmaTask");

                    b.HasAnnotation("Relational:JsonPropertyName", "tasks_list");
                });

            modelBuilder.Entity("Emma.Models.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("AiResponse")
                        .HasColumnType("text");

                    b.Property<string>("BlobStorageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("OccurredAt", "Type")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Emma.Models.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FubApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FubId")
                        .HasColumnType("integer");

                    b.Property<string>("FubSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FubSystemKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FubApiKey")
                        .IsUnique();

                    b.HasIndex("FubSystem")
                        .IsUnique();

                    b.HasIndex("FubSystemKey")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Emma.Models.Models.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Emma.Models.Models.Subscription", b =>
                {
                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCallProcessingEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<int>("SeatsLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.HasKey("AgentId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Emma.Models.Models.Transcription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlobStorageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("Transcriptions");
                });

            modelBuilder.Entity("Emma.Models.Models.Agent", b =>
                {
                    b.HasOne("Emma.Models.Models.Organization", "Organization")
                        .WithMany("Agents")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Emma.Models.Models.AgentAssignment", b =>
                {
                    b.HasOne("Emma.Models.Models.EmmaAnalysis", "EmmaAnalysis")
                        .WithMany("AgentAssignments")
                        .HasForeignKey("EmmaAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmmaAnalysis");
                });

            modelBuilder.Entity("Emma.Models.Models.AgentPhoneNumber", b =>
                {
                    b.HasOne("Emma.Models.Models.Agent", "Agent")
                        .WithOne("PhoneNumber")
                        .HasForeignKey("Emma.Models.Models.AgentPhoneNumber", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Models.Models.CallMetadata", b =>
                {
                    b.HasOne("Emma.Models.Models.Message", "Message")
                        .WithOne("CallMetadata")
                        .HasForeignKey("Emma.Models.Models.CallMetadata", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Emma.Models.Models.Conversation", b =>
                {
                    b.HasOne("Emma.Models.Models.Organization", "Organization")
                        .WithMany("Conversations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Emma.Models.Models.ConversationSummary", b =>
                {
                    b.HasOne("Emma.Models.Models.Conversation", "Conversation")
                        .WithOne("Summary")
                        .HasForeignKey("Emma.Models.Models.ConversationSummary", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Emma.Models.Models.DeviceToken", b =>
                {
                    b.HasOne("Emma.Models.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Models.Models.EmmaAnalysis", b =>
                {
                    b.HasOne("Emma.Models.Models.Message", "Message")
                        .WithMany("EmmaAnalyses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Emma.Models.Models.EmmaTask", b =>
                {
                    b.HasOne("Emma.Models.Models.EmmaAnalysis", null)
                        .WithMany("TasksList")
                        .HasForeignKey("EmmaAnalysisId");
                });

            modelBuilder.Entity("Emma.Models.Models.Message", b =>
                {
                    b.HasOne("Emma.Models.Models.Agent", "Agent")
                        .WithMany("Messages")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emma.Models.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Emma.Models.Models.PasswordResetToken", b =>
                {
                    b.HasOne("Emma.Models.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Models.Models.Subscription", b =>
                {
                    b.HasOne("Emma.Models.Models.Agent", "Agent")
                        .WithOne("Subscription")
                        .HasForeignKey("Emma.Models.Models.Subscription", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Emma.Models.Models.Transcription", b =>
                {
                    b.HasOne("Emma.Models.Models.Message", "Message")
                        .WithOne("Transcription")
                        .HasForeignKey("Emma.Models.Models.Transcription", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Emma.Models.Models.Agent", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("PhoneNumber");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Emma.Models.Models.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("Emma.Models.Models.EmmaAnalysis", b =>
                {
                    b.Navigation("AgentAssignments");

                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Emma.Models.Models.Message", b =>
                {
                    b.Navigation("CallMetadata");

                    b.Navigation("EmmaAnalyses");

                    b.Navigation("Transcription")
                        .IsRequired();
                });

            modelBuilder.Entity("Emma.Models.Models.Organization", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Conversations");
                });
#pragma warning restore 612, 618
        }
    }
}
